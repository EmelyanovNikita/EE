Задание 12 (Разделяемая память System V, 3 балла)
Родительский процесс генерирует наборы из случайного количества случайных чисел и помещает в разделяемую память.
Дочерний процесс находит максимальное и минимальное число и также помещает их в разделяемую память, после чего родительский процесс выводит найденные значения на экран.
Процесс повторяется до получения сигнала SIGINT, после чего выводится количество обработанных наборов данных.


В данной работе я решил реализовать работу не используя sleep(), поэтому использовал два семафора,
чтобы правильно организовать последовательность работы (взаимодействия между процессами) в данной программе нам нужен такой порядок
1) Родительский процесс генерирует наборы из случайного количества случайных чисел и помещает в разделяемую память.
В данном месте ещё до fork заблокировали первый семафор, чтобы потмок не успел убежать вперёд, это так мы реализуем синхронизацию
при первой этерации, при последующих, у нас остатся заблокированным семафор между итарациями цикла далее будет рассказано подробнее
2) Потмок находит максимальное и минимальное число и также помещает их в разделяемую память
В данном месте у нас сначала (!) потомок блокирует второй семафор, чтобы родительский процесс не начал читать до того как мы запишем туда,
потом блокирует первый семафор ( ждёт пока его разблокирует родительский процесс, записав свои данные в разделяемую память) и дальше уже
он ищет наименьшее и наибольшее и пишет их в разделемую память, затем разблокирует оба семафора
3) После чего родительский процесс выводит найденные значения на экран
Тут у нас родительский процесс изначально блокирует второй и потмо первый семафоры, читает и выводит данные после чего родитель
разблокирует только (!) второй семафор, первый остаётся заблокированным, чтобы потомок не убежал вперёд, до следующей итерации, где
родительский процесс снова записывает в память, и разблокирывает доступ к ней. Если последняя итерация, тогда после цикла освобождаем
семафор.
